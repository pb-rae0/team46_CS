module right_arith_shifter #(
    SIZE = 32 : SIZE > 0
)(
    input a[SIZE],        // Input data to be shifted
    input b[5],           // Shift count (B[4:0])
    input pad,            // Padding value (sign bit A[31])
    output sra[SIZE]      // Output after arithmetic right shift
) {
    x_bit_right_shifter arith_shift_16(#SHIFT(16));
    x_bit_right_shifter arith_shift_8(#SHIFT(8));
    x_bit_right_shifter arith_shift_4(#SHIFT(4));
    x_bit_right_shifter arith_shift_2(#SHIFT(2));
    x_bit_right_shifter arith_shift_1(#SHIFT(1));

    always {
        // Connect padding for arithmetic shift (sign bit A[31])
        arith_shift_16.pad = pad;
        arith_shift_8.pad = pad;
        arith_shift_4.pad = pad;
        arith_shift_2.pad = pad;
        arith_shift_1.pad = pad;

        // Setup control signals for cascading shifts
        arith_shift_16.do_shift = b[4];
        arith_shift_8.do_shift = b[3];
        arith_shift_4.do_shift = b[2];
        arith_shift_2.do_shift = b[1];
        arith_shift_1.do_shift = b[0];

        // Cascade shifts to compute final result
        arith_shift_16.a = a;
        arith_shift_8.a = arith_shift_16.out;
        arith_shift_4.a = arith_shift_8.out;
        arith_shift_2.a = arith_shift_4.out;
        arith_shift_1.a = arith_shift_2.out;

        sra = arith_shift_1.out;  // Final output after cascading shifts
    }
}
