module alu (
    input a[32],
    input b[32],
    input alufn_signal[6],
    output out[32],
    output z,
    output v,
    output n
) {
    // sig rst
    adder adder(#SIZE(32));
    compare compare;
    shifter shifter;
    boolean boolean;
    multiplier multiplier;
    
    always {
        // implement alu logic here
        // connect inputs to adder
               
        adder.a = a;
        adder.b = b;
        adder.alufn_signal = alufn_signal[0];
        
        // out = 0
        // flags from adder
        z = adder.z;
        v = adder.v;
        n = adder.n;
       
        
        compare.z = adder.z
        compare.v = adder.v
        compare.n = adder.n
        compare.alufn = alufn_signal[3:0];
        
        boolean.a = a;
        boolean.b = b;
        boolean.alufn_signal = alufn_signal[3:0];
        
        shifter.a = a;
        shifter.b = b[4:0];
        
        shifter.alufn = alufn_signal[1:0];
        
        multiplier.a = a;
        multiplier.b = b;
        
        out = multiplier.mul;
        
        case (alufn_signal[5:4])
        {
            // adder result
            b00: out = adder.out;
            
            // comparison result, concatenate 31 zero bits
            b01: out = c{31x{b0}, compare.cmp};
            
            // boolean unit test case
            b10: out = boolean.bool;
            
            // shifter unit test case
            b11: out = shifter.out;
            default: out = 32b0;
        }
       
    }
    
    
}